{"ast":null,"code":"const eventServices = {\n  get: async function (limit) {\n    const promise = await fetch(`http://localhost:4000/event?limit=${limit}`);\n    const events = await promise.json();\n    return events;\n  },\n  create: function (data) {\n    return fetch('http://localhost:4000/event/create', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-type': 'application/json'\n      },\n      credentials: 'include'\n    }).then(res => res.json());\n  },\n  edit: function (id, data) {\n    debugger;\n    return fetch('http://localhost:4000/event/edit/' + id, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-type': 'application/json'\n      },\n      credentials: 'include'\n    }).then(res => res.json());\n  },\n  delete: function (id) {\n    return fetch('http://localhost:4000/event/delete/' + id, {\n      method: 'DELETE',\n      credentials: 'include'\n    }).then(res => res.json());\n  },\n  like: function (id) {\n    return fetch('http://localhost:4000/event/like/' + id, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      credentials: 'include'\n    }).then(res => res.json());\n  },\n  dislike: function (id) {\n    return fetch('http://localhost:4000/event/dislike/' + id, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      credentials: 'include'\n    }).then(res => res.json());\n  },\n  details: async function (id) {\n    const promise = await fetch(`http://localhost:4000/event/details/${id}`, {\n      method: 'GET',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      credentials: 'include'\n    });\n    const event = await promise.json();\n    return event;\n  }\n};\nexport default eventServices;","map":{"version":3,"sources":["/Users/kishank/Desktop/Event-Manager/client/src/services/event-services.js"],"names":["eventServices","get","limit","promise","fetch","events","json","create","data","method","body","JSON","stringify","headers","credentials","then","res","edit","id","delete","like","dislike","details","event"],"mappings":"AAAA,MAAMA,aAAa,GAAG;AAClBC,EAAAA,GAAG,EAAE,gBAAeC,KAAf,EAAsB;AACvB,UAAMC,OAAO,GAAG,MAAMC,KAAK,CAAE,qCAAoCF,KAAM,EAA5C,CAA3B;AACA,UAAMG,MAAM,GAAG,MAAMF,OAAO,CAACG,IAAR,EAArB;AAEA,WAAOD,MAAP;AACH,GANiB;AAOlBE,EAAAA,MAAM,EAAE,UAASC,IAAT,EAAe;AACnB,WAAOJ,KAAK,CAAC,oCAAD,EAAuC;AAC/CK,MAAAA,MAAM,EAAE,MADuC;AAE/CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAFyC;AAG/CK,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAHsC;AAM/CC,MAAAA,WAAW,EAAE;AANkC,KAAvC,CAAL,CAOJC,IAPI,CAOCC,GAAG,IAAIA,GAAG,CAACV,IAAJ,EAPR,CAAP;AAQH,GAhBiB;AAiBlBW,EAAAA,IAAI,EAAE,UAAUC,EAAV,EAAcV,IAAd,EAAoB;AACtB;AACA,WAAOJ,KAAK,CAAC,sCAAsCc,EAAvC,EAA2C;AACnDT,MAAAA,MAAM,EAAE,KAD2C;AAEnDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAF6C;AAGnDK,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAH0C;AAMnDC,MAAAA,WAAW,EAAE;AANsC,KAA3C,CAAL,CAOJC,IAPI,CAOCC,GAAG,IAAIA,GAAG,CAACV,IAAJ,EAPR,CAAP;AAQH,GA3BiB;AA4BlBa,EAAAA,MAAM,EAAE,UAAUD,EAAV,EAAc;AAClB,WAAOd,KAAK,CAAC,wCAAwCc,EAAzC,EAA6C;AACrDT,MAAAA,MAAM,EAAE,QAD6C;AAErDK,MAAAA,WAAW,EAAE;AAFwC,KAA7C,CAAL,CAGJC,IAHI,CAGCC,GAAG,IAAIA,GAAG,CAACV,IAAJ,EAHR,CAAP;AAIH,GAjCiB;AAkClBc,EAAAA,IAAI,EAAE,UAAUF,EAAV,EAAc;AAChB,WAAOd,KAAK,CAAC,sCAAsCc,EAAvC,EAA2C;AACnDT,MAAAA,MAAM,EAAE,KAD2C;AAEnDI,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAF0C;AAKnDC,MAAAA,WAAW,EAAE;AALsC,KAA3C,CAAL,CAMJC,IANI,CAMCC,GAAG,IAAIA,GAAG,CAACV,IAAJ,EANR,CAAP;AAOH,GA1CiB;AA2ClBe,EAAAA,OAAO,EAAE,UAAUH,EAAV,EAAc;AACnB,WAAOd,KAAK,CAAC,yCAAyCc,EAA1C,EAA8C;AACtDT,MAAAA,MAAM,EAAE,KAD8C;AAEtDI,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAF6C;AAKtDC,MAAAA,WAAW,EAAE;AALyC,KAA9C,CAAL,CAMJC,IANI,CAMCC,GAAG,IAAIA,GAAG,CAACV,IAAJ,EANR,CAAP;AAOH,GAnDiB;AAoDlBgB,EAAAA,OAAO,EAAE,gBAAgBJ,EAAhB,EAAoB;AACzB,UAAMf,OAAO,GAAG,MAAMC,KAAK,CAAE,uCAAsCc,EAAG,EAA3C,EAA8C;AACrET,MAAAA,MAAM,EAAE,KAD6D;AAErEI,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAF4D;AAKrEC,MAAAA,WAAW,EAAE;AALwD,KAA9C,CAA3B;AAOA,UAAMS,KAAK,GAAG,MAAMpB,OAAO,CAACG,IAAR,EAApB;AAEA,WAAOiB,KAAP;AACH;AA/DiB,CAAtB;AAkEA,eAAevB,aAAf","sourcesContent":["const eventServices = {\n    get: async function(limit) {\n        const promise = await fetch(`http://localhost:4000/event?limit=${limit}`);\n        const events = await promise.json();\n\n        return events;\n    },\n    create: function(data) {\n        return fetch('http://localhost:4000/event/create', {\n            method: 'POST',\n            body: JSON.stringify(data),\n            headers: {\n                'Content-type': 'application/json'\n            },\n            credentials: 'include'\n        }).then(res => res.json());\n    },\n    edit: function (id, data) {\n        debugger;\n        return fetch('http://localhost:4000/event/edit/' + id, {\n            method: 'PUT',\n            body: JSON.stringify(data),\n            headers: {\n                'Content-type': 'application/json'\n            },\n            credentials: 'include'\n        }).then(res => res.json());\n    },\n    delete: function (id) {\n        return fetch('http://localhost:4000/event/delete/' + id, {\n            method: 'DELETE',\n            credentials: 'include'\n        }).then(res => res.json());\n    },\n    like: function (id) {\n        return fetch('http://localhost:4000/event/like/' + id, {\n            method: 'PUT',\n            headers: {\n                'Content-type': 'application/json'\n            },\n            credentials: 'include'\n        }).then(res => res.json());\n    },\n    dislike: function (id) {\n        return fetch('http://localhost:4000/event/dislike/' + id, {\n            method: 'PUT',\n            headers: {\n                'Content-type': 'application/json'\n            },\n            credentials: 'include'\n        }).then(res => res.json());\n    },\n    details: async function (id) {\n        const promise = await fetch(`http://localhost:4000/event/details/${id}`, {\n            method: 'GET',\n            headers: {\n                'Content-type': 'application/json'\n            },\n            credentials: 'include'\n        });\n        const event = await promise.json();\n\n        return event;\n    }\n}\n\nexport default eventServices;"]},"metadata":{},"sourceType":"module"}